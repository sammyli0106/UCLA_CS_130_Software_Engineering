/*
 * generated by Xtext 2.24.0
 */
package org.xtext.cs130.activity.generator

import org.eclipse.emf.ecore.resource.Resource

// Change participant to declared participant

import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.cs130.activity.activity.Activity
//import org.xtext.cs130.activity.activity.Participant
import org.xtext.cs130.activity.activity.IfElseStatement
import org.xtext.cs130.activity.activity.Fork
import org.xtext.cs130.activity.activity.Branchs
import org.xtext.cs130.activity.activity.Events
import org.xtext.cs130.activity.activity.Actions
import org.xtext.cs130.activity.activity.DeclaredParticipant

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class ActivityGenerator extends AbstractGenerator {
	
	// Todo: I might have to refix the grammar and add/alter more here (done)
	// Todo: I need to add in check null statements for some of the cases here (done)
	// Todo: I need to add the handle of start actions from grammar into here (done)
	
	var numOfFork = 0;
	
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val activity = resource.contents.filter(Activity).head
		val text = generate(activity);
		val fileName = resource.URI.trimFileExtension.appendFileExtension("plantuml").lastSegment
		fsa.generateFile(fileName, text);
		
	}
	
	def dispatch String generate(Activity diagram) '''
	@startuml
	«IF diagram.type !== null»«generate(diagram.type)»«ENDIF»
	start
	«FOR ifelse : diagram.activities.filter(IfElseStatement)»
		«generate(ifelse)»
	«ENDFOR»
	«FOR fork : diagram.activities.filter(Fork)»
		«generate(fork)»
	«ENDFOR»
	«FOR actions : diagram.activities.filter(Actions)»
		«generate(actions)»
	«ENDFOR»
	«{ numOfFork = 0; "" }»
	stop
	@enduml
	'''
	// Events, get label for things under Events 
	def dispatch String getLabel(Events events) '''
	«IF events instanceof IfElseStatement»if («events.name») then (yes)«ENDIF»
	'''
	// get label for Actions
	def dispatch String getLabel(Actions actions) '''
	«IF actions instanceof Actions»:«actions.name»;«ENDIF»
	'''
	
	
	def dispatch String generate(DeclaredParticipant declaredP) '''
	«IF declaredP.name !== null»|«declaredP.name»|«ENDIF»
	'''
	
	// ifelse.type = Participant 
	// Added the check null statements 
	def dispatch String generate(IfElseStatement ifelse) '''
	«IF ifelse.type !== null»«generate(ifelse.type)»«ifelse.label»«ENDIF»
	«FOR nestedifelse : ifelse.yesEvent.filter(IfElseStatement)»
		«generate(nestedifelse)»
	«ENDFOR»
	«FOR nestedfork : ifelse.yesEvent.filter(Fork)»
		«generate(nestedfork)»
	«ENDFOR»
	«FOR nestedactions : ifelse.yesEvent.filter(Actions)»
		«generate(nestedactions)»
	«ENDFOR»
	else (no)
	«FOR nestedifelse : ifelse.noEvent.filter(IfElseStatement)»
		«generate(nestedifelse)»
	«ENDFOR»
	«FOR nestedfork : ifelse.noEvent.filter(Fork)»
		«generate(nestedfork)»
	«ENDFOR»
	«FOR nestedactions : ifelse.noEvent.filter(Actions)»
		«generate(nestedactions)»
	«ENDFOR»
	endif
	'''
	
	// fork.type = participant
	// added the null statement 
	def dispatch String generate(Fork fork) '''
	«IF fork.type !== null»«generate(fork.type)»«ENDIF» fork 
	«FOR nestedbranch : fork.forkEvent.filter(Branchs)»
		«generate(nestedbranch)»
	«ENDFOR»
	end fork
	'''
	
	// The side effect part might not the best, but works for now 
	def dispatch String generate(Branchs branchs) '''
		«FOR nestedifelse : branchs.branchEvent.filter(IfElseStatement)»
			«generate(nestedifelse)»
		«ENDFOR»
		«IF numOfFork > 0»fork again «ENDIF»
		«{ numOfFork = numOfFork + 1; "" }»
		«FOR nestedfork : branchs.branchEvent.filter(Fork)»
			«generate(nestedfork)»
		«ENDFOR»
		«FOR nestedactions : branchs.branchEvent.filter(Actions)»
			«generate(nestedactions)»
		«ENDFOR»
	'''
	
	// action.type = participant, double check if I need to add the .label
	def dispatch String generate(Actions actions) '''
	«IF actions.type !== null»«generate(actions.type)»«ENDIF»
	«IF actions.label !== null»«actions.label»«ENDIF»
	'''
	
	
}
