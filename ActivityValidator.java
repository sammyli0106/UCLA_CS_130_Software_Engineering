/*
 * generated by Xtext 2.24.0
 */
package org.xtext.cs130.activity.validation;

import org.eclipse.xtext.validation.Check;

import org.xtext.cs130.activity.activity.Actions;
import org.xtext.cs130.activity.activity.Activity;
import org.xtext.cs130.activity.activity.ActivityPackage;
import org.xtext.cs130.activity.activity.Branchs;
import org.xtext.cs130.activity.activity.DeclaredParticipant;
import org.xtext.cs130.activity.activity.Fork;
import org.xtext.cs130.activity.activity.IfElseStatement;

// Change Participant to DeclaredParticipant *******
//import org.xtext.cs130.activity.activity.Participant;

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
public class ActivityValidator extends AbstractActivityValidator {
	
	// TODO: Write a warning that if a participant is declared but not used anywhere
		// For example, declared "participant p2" in activity body; but p2 is not used in if else, fork, action at all 
	// TODO: Write an error if participants are declared bu the activity does not reference one of them 
		// For example, declared "participant p1"; but "activity Activity1", should be "p1 activity Activity1"
	
	public static final String PARTICIPANT_DECLARED_NO_REFERENCED = "ParticipantDeclaredNoReferenced";
	public static final String PARTICIPANT_DECLARED_NO_USED = "ParticipantDeclaredNoUsed";
	public static final String PARTICIPANT_NOT_DECLARED_USED = "ParticipantNotDeclaredUsed";
	
	
	// ------------------------------------ already finished work below -------------------------------------
	
	// Warning function: If a participant is declared but not used anywhere 
	
	@Check
	public void checkParticipantDeclaredNoUsed(Activity activity) {
		// Loop through the declared participant 
		var participant_list = activity.getDeclaredParticipants();
		
		// default: no warning = true
		var final_flag = true;
		
			// Loop through the declared participant list 
			for (var events: participant_list) {
				if (events instanceof DeclaredParticipant) {
					// Extracted the name that is pending to check 
					String check_name = ((DeclaredParticipant)events).getName();
					
					
					// Pass it to a separate helper function to check a specific declared participant 
					final_flag = localCheckEvents(check_name, activity);
					
				}
			}
		
		// localcheck = true / false
				// true = no warning
				// false = yes warning
			
			
		// display warning when final flag = false
		if (!final_flag) {
			warning("A participant is declared but not used in anywhere else", ActivityPackage.Literals.ACTIVITY__NAME, PARTICIPANT_DECLARED_NO_USED);
		}
	}
	
	
	public boolean localCheckEvents(String p_name, Activity activity) {
		// get the activity list
		var activity_list = activity.getActivities();
		
		// found flag default to be not found 
		boolean ifelse_found = false;
		boolean fork_found = false;
		boolean action_found = false;
		
		// default to be no warning
		boolean combine_flag = true;
		
		// want the warning default to not show up, only show up when one of them is true
		
		if (activity_list != null) {
			for (var event: activity_list) {
				if (event != null) {
					if (event instanceof IfElseStatement) {
						ifelse_found = handleIfElse(p_name, (IfElseStatement)event);
						
						if (ifelse_found) {
							break;
						}
					}
					else if (event instanceof Fork) {
						fork_found = handleFork(p_name, (Fork)event);
						
						if (fork_found) {
							break;
						}
					}
					else if (event instanceof Actions) {
						// This is a terminal, call a separate helper function for reuse
						action_found = handleActions(p_name, (Actions)event);
						
						// if true, break early
						if (action_found) {
							break;
						}

					}
				}
			}
		}
		
		// f, f, f = warning
		// at least one t = no warning
		
		if (!ifelse_found && !fork_found && !action_found) {
			
			// one of the match is found among one of the three 
			combine_flag = false;
		}
		
		return combine_flag;
	}
	
	public boolean handleActions(String p_name, Actions act) {
		boolean act_flag = false;
		
		if (act != null) {
			if (act.getType() != null) {
				if (act.getType().getName() != null) {
					
					var act_name = act.getType().getName();
					
					if (act_name.equals(p_name)) {

						// found = true
						act_flag = true;
					}
				}
			}
		}
		
		// not found = false
		return act_flag;
	}
	
	public boolean handleIfElse(String p_name, IfElseStatement ifelse) {
		boolean ifelse_flag = false;
		
		// 1. Check if people is here, then type, then name
		// 2. not found, then go into yes and no 
		// 3. yes: ifelse, fork, action
		// 4. no: ifelse, fork, action
		
		if (ifelse != null) {
			// people is here
			if (ifelse.getType() != null) {
				if (ifelse.getType().getName() != null) {
					var if_name = ifelse.getType().getName();
					
					// name equal
					if (if_name.equals(p_name)) {
						ifelse_flag = true;
					} 
					else {
						// name not equal, keep searching
					}
				}
			} else {
				// no people is here, keep searching
			}
			
			// no people and no name match, then search on
			// flag is still false
			if (!ifelse_flag) {
				var yes_list = ifelse.getYesEvent();
				var no_list = ifelse.getNoEvent();
				
				// if part
				if (yes_list != null) {
					for (var yes_event: yes_list) {
						if (yes_event != null) {
							if (yes_event instanceof IfElseStatement) {
								ifelse_flag = handleIfElse(p_name, (IfElseStatement)yes_event);
								
								// $$$$$new added
								if (ifelse_flag) {
									break;
								}
							}
							else if (yes_event instanceof Fork) {
								// added along with creation of handle fork *
								
								ifelse_flag = handleFork(p_name, (Fork)yes_event);
								
								// if true, break early *
								if (ifelse_flag) {
									break;
								}
							}
							else if (yes_event instanceof Actions) {
								// can call the action function
								ifelse_flag = handleActions(p_name, (Actions)yes_event);
								
								// if true, break early 
								if (ifelse_flag) {
									break;
								}
							}
						}
					}
				}
				
				// else part
				// **** be careful the no part overwritten the top yes 
				// I only search no part, if i did not find anything after yes part 
				if (no_list != null && !ifelse_flag) {
					for (var no_event: no_list) {
						if (no_event != null) {
							if (no_event instanceof IfElseStatement) {
								ifelse_flag = handleIfElse(p_name, (IfElseStatement)no_event);
								
								if (ifelse_flag) {
									break;
								}
								
							}
							else if (no_event instanceof Fork) {
								// added along with creation of handle fork *
								
								
								// this part is the overwritten part??
								ifelse_flag = handleFork(p_name, (Fork)no_event);
								
								
								//break early if true *
								if (ifelse_flag) {
									break;
								}
							}
							else if (no_event instanceof Actions) {
								// can call the action function
								ifelse_flag = handleActions(p_name, (Actions)no_event);
								
								// if true, break early 
								if (ifelse_flag) {
									break;
								}
							}
						}
					}
				}
			}
		
		}
		
		
		return ifelse_flag;
	}
	
	public boolean handleFork(String p_name, Fork fork) {
		boolean fork_flag = false;
		
		// 1. Check if people is here, then type, then name
		// 2. not found, then go into fork event
		// 3. all fork event are branch, redirect to handle branch 
		
		if (fork != null) {
			if (fork.getType() != null) {
				if (fork.getType().getName() != null) {
					var fork_name = fork.getType().getName();
					
					if (fork_name.equals(p_name)) {
						// match, return early
						
						fork_flag = true;
					}
				}
			}
			
			// no people or name mismatch, keep searching
			if (!fork_flag) {
				var fork_list = fork.getForkEvent();
				
				if (fork_list != null) {
					// not empty, start looping
					for (var fork_event: fork_list) {
						if (fork_event != null) {
							if (fork_event instanceof Branchs) {
								
								fork_flag = handleBranch(p_name, (Branchs) fork_event);
								
								// if true, then break early, stop search, be aware
								if (fork_flag) {
									break;
								}
							}
						}
 					}
				}
			}
		}
		
		
		return fork_flag;
	}
	
	public boolean handleBranch(String p_name, Branchs branch) {
		boolean branch_flag = false;
		
		var branch_list = branch.getBranchEvent();
		
		// if list is not empty 
		if (branch_list != null) {
			for (var branch_event: branch_list) {
				if (branch_event != null) {
					
					// if else
					if (branch_event instanceof IfElseStatement) {
						//not test yet
						branch_flag = handleIfElse(p_name, (IfElseStatement)branch_event);
						
						if (branch_flag) {
							break;
						}
					}
					// fork
					else if (branch_event instanceof Fork) {
						// not test yet 
						branch_flag = handleFork(p_name, (Fork)branch_event);
						
						if (branch_flag) {
							break;
						}
					}
					//actions
					else if (branch_event instanceof Actions) {
						branch_flag = handleActions(p_name, (Actions)branch_event);
						
						if (branch_flag) {
							break;
						}
					}
				}
			}
		}
		
		// if empty, then just return false
		return branch_flag;
	}
	
	
	//-------------------------------- End of first function check work -----------------------
	
	// Error Function: if participants are declared but the activtity does not reference one of them
	// For example, declared "participant p1"; but "activity Activity1", should be "p1 activity Activity1"
	
	@Check
	public void checkParticipantDeclaredReferenced(Activity activity) {
		
		var participant_list = activity.getDeclaredParticipants();
		
		for (var events: participant_list) {
			
			
			if (events instanceof DeclaredParticipant) {
				
				if (((DeclaredParticipant) events).getName() != null && activity.getType() == null) {
					error("Participants are declared but the activity does not reference one of them", ActivityPackage.Literals.ACTIVITY__NAME, PARTICIPANT_DECLARED_NO_REFERENCED);
					break;
				}
			}
		}
	}
	
}
